// 1. Create a collection named orders.
db.createCollection('orders')

var orders = db.orders

// 2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
orders.insert({orderDate: new ISODate('2016-11-20'), orderTotal: 220, lineItems: [{unitPrice:55}, {quantity: 4}, {productName: 'cheese'}] });
orders.insert({orderDate: new ISODate('2015-10-20'), orderTotal: 16, lineItems: [{unitPrice:2}, {quantity: 8}, {productName: 'bread'}] });
orders.insert({orderDate: new ISODate('2015-10-20'), orderTotal: 100, lineItems: [{unitPrice:1}, {quantity: 100}, {productName: 'shrimp'}] });

// 3. Find a single order document, any order document.
orders.find({"orderTotal":220})

// 4. Find all orders and make them look pretty.
orders.find({}).pretty()

// 5. Find all orders with an orderDate that is prior to 1/1/2016.
orders.find({orderDate: {$lt: new Date('2016-01-01')}})

// 6. Find all orders with an orderDate that is after 1/1/2016.
orders.find({orderDate: {$gt: new Date('2016-01-01')}})

// 7.Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.
orders.find({ $and: [ { "lineItems.quantity": { $lt: 50 } }, { "lineItems.quantity": { $gt: 5 } }]})

// 8.Update one of your line items to 42.99. HINT: Look at dot notation
orders.update({"_id" : ObjectId("583f52b57c23786933d87776")}, {$set: {"lineItems.0.unitPrice": 42.99}})

// 9. Remove one of your orders.
orders.remove({"_id" : ObjectId("583f52b57c23786933d87776")}) 583f52b57c23786933d87776
